
namespace Ash
{

	/// <summary>
	/// Default template, for Unity + KEngine
	/// </summary>
	public class DTMySQLTemplate
    {
		public static string GenCodeTemplate = @"
// This file is auto generated by DataTableModuleEditor.cs!
// Don't manipulate me!
// Default Template for KEngine!

using System.Collections;
using System.Collections.Generic;
using TableML;

namespace {{ NameSpace }}
{
    public partial class MySQLManager
    {
#if UNITY_EDITOR

        [UnityEditor.MenuItem(""Window/Ash/DT/MySQL/Update All DataTables To MySQL"")]
#endif
        public static void UpdateAllDataTablesToMySQL()
        {{% for file in Files %}
            Update{{file.ClassName}}ToMySQL();{% endfor %} 
        }
{% for file in Files %}
#if UNITY_EDITOR

        [UnityEditor.MenuItem(""Window/Ash/DT/MySQL/Class/Update {{file.ClassName}} DataTable To MySQL"")]
#endif
        public static void Update{{file.ClassName}}ToMySQL()
        {
            //删除数据库
            string commandText = ""DROP TABLE {{file.ClassName}}"";
            DatabaseManager.GetInstance().DoSQLUpdateDelete(commandText);

            commandText = ""CREATE TABLE {{file.ClassName}} ("";
            {% for field in file.Fields %}
            commandText += DTMySQLExtenion.GetMySQL_{{ field.FormatType }}(""{{ field.Name }}"");            {% endfor %}
            commandText = commandText.Substring(0,commandText.Length - 1)
            commandText += "");"";

            DatabaseManager.GetInstance().OpenDatabase();
            DatabaseManager.GetInstance().DoSQLUpdateDelete(commandText);

            //数据库插入数据
        }{% endfor %} 
    }

    /// <summary>
    /// Auto Generate for Tab File: ""{{file.ClassName}}.bytes""
    /// No use of generic and reflection, for better performance,  less IL code generating
    /// </summary>>
    public partial class DTMySQL{{file.ClassName}}_Manager
    {
        private Dictionary<string, DTMySQL{{file.ClassName}}> _dict = new Dictionary<string, DTMySQL{{file.ClassName}}>();

        public DTMySQL{{file.ClassName}}_Manager()
        {
            _dict = new Dictionary<string, DTMySQL{{file.ClassName}}>();
        }

        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the dataTable file: {{file.ClassName}}, no exception when duplicate primary key
        /// </summary>
        public static List<DTMySQL{{file.ClassName}}> LoadAll()
        {
            List<DTMySQL{{file.ClassName}}> testTempList = new List<DTMySQL{{file.ClassName}}>();

            return testTempList;
        }

        public static List<DTMySQL{{file.ClassName}}> LoadAllByLimit(int form, int to)
        {
            List<DTMySQL{{file.ClassName}}> testTempList = new List<DTMySQL{{file.ClassName}}>();

            return testTempList;
        }

        /// <summary>
        /// 获得MySQL数据表里面的Row总数量
        /// </summary>
        public static int MySQL_GetRowsCount()
        {
            return 0;
        }

        public static DTMySQL{{file.ClassName}} MySQL_GetByID(int id)
        {
            //List<DTMySQL{{file.ClassName}}> testTempList = new List<DTMySQL{{file.ClassName}}>();
            return null;
        }

        public static int MySQL_GetMaxID()
        {
            //List<DTMySQL{{file.ClassName}}> testTempList = new List<DTMySQL{{file.ClassName}}>();
            return 0;
        }

        public static DTMySQL{{file.ClassName}} MySQL_GetByMaxID()
        {
            //List<DTMySQL{{file.ClassName}}> testTempList = new List<DTMySQL{{file.ClassName}}>();
            return null;
        }

        /// <summary>
        /// foreachable enumerable: {{file.ClassName}}
        /// </summary>
        public IEnumerable GetAll()
        {
            foreach (var row in _dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: {{file.ClassName}}
        /// </summary>
	    public IEnumerator GetEnumerator()
        {
            return _dict.Values.GetEnumerator();
        }

        /// <summary>
        /// 获取数据表行。
        /// </summary>
        /// <param name=""id"">数据表行的PrimaryKey。</param>
        /// <returns>数据表行。</returns>
        public DTMySQL{{file.ClassName}} Get(string primaryKey)
        {
            DTMySQL{{file.ClassName}} dataTable;
            if (_dict.TryGetValue(primaryKey, out dataTable)) return dataTable;
            return null;
        }

        /// <summary>
        /// 检查是否存在数据表行。
        /// </summary>
        /// <param name=""primaryKey"" > 数据表行的主Key。</param>
        /// <returns>是否存在数据表行。</returns>
        public bool HasDataRow(string primaryKey)
        {
            return _dict.ContainsKey(primaryKey);
        }

        /// <summary>
        /// 检查是否存在数据表行。
        /// </summary>
        /// <param name=""condition"" > 要检查的条件。</param>
        /// <returns>是否存在数据表行。</returns>
        public bool HasDataRow(System.Predicate<DTMySQL{{file.ClassName}}> condition)
        {
            if (condition == null)
            {
                throw new System.Exception(""Condition is invalid."");
            }

            foreach (var dataRow in _dict)
            {
                if (condition(dataRow.Value))
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// 获取符合条件的数据表行。
        /// </summary>
        /// <param name=""condition"" > 要检查的条件。</param>
        /// <returns>符合条件的数据表行。</returns>
        /// <remarks>当存在多个符合条件的数据表行时，仅返回第一个符合条件的数据表行。</remarks>
        public DTMySQL{{file.ClassName}} GetDataRow(System.Predicate<DTMySQL{{file.ClassName}}> condition)
        {
            if (condition == null)
            {
                throw new System.Exception(""Condition is invalid."");
            }

            foreach (var dataRow in _dict)
            {
                DTMySQL{{file.ClassName}} dr = dataRow.Value;
                if (condition(dr))
                {
                    return dr;
                }
            }

            return null;
        }

        /// <summary>
        /// 获取所有数据表行。
        /// </summary>
        /// <returns>所有数据表行。</returns>
        public DTMySQL{{file.ClassName}}[] GetAllDataRows()
        {
            int index = 0;
            DTMySQL{{file.ClassName}}[] allDataRows = new DTMySQL{{file.ClassName}}[Count];
            foreach (var dataRow in _dict)
            {
                allDataRows[index++] = dataRow.Value;
            }

            return allDataRows;
        }

        /// <summary>
        /// 获取所有符合条件的数据表行。
        /// </summary>
        /// <param name=""condition"" > 要检查的条件。</param>
        /// <returns>所有符合条件的数据表行。</returns>
        public DTMySQL{{file.ClassName}}[] GetAllDataRows(System.Predicate<DTMySQL{{file.ClassName}}> condition)
        {
            if (condition == null)
            {
                throw new System.Exception(""Condition is invalid."");
            }

            List<DTMySQL{{file.ClassName}}> results = new List<DTMySQL{{file.ClassName}}>();
            foreach (var dataRow in _dict)
            {
                DTMySQL{{file.ClassName}} dr = dataRow.Value;
                if (condition(dr))
                {
                    results.Add(dr);
                }
            }

            return results.ToArray();
        }

        /// <summary>
        /// 获取所有排序后的数据表行。
        /// </summary>
        /// <param name=""comparison"" > 要排序的条件。</param>
        /// <returns>所有排序后的数据表行。</returns>
        public DTMySQL{{file.ClassName}}[] GetAllDataRows(System.Comparison<DTMySQL{{file.ClassName}}> comparison)
        {
            if (comparison == null)
            {
                throw new System.Exception(""Comparison is invalid."");
            }

            List<DTMySQL{{file.ClassName}}> allDataRows = new List<DTMySQL{{file.ClassName}}>();
            foreach (var dataRow in _dict)
            {
                allDataRows.Add(dataRow.Value);
            }

            allDataRows.Sort(comparison);
            return allDataRows.ToArray();
        }

        /// <summary>
        /// 获取所有排序后的符合条件的数据表行。
        /// </summary>
        /// <param name=""condition"" > 要检查的条件。</param>
        /// <param name=""comparison"" > 要排序的条件。</param>
        /// <returns>所有排序后的符合条件的数据表行。</returns>
        public DTMySQL{{file.ClassName}}[] GetAllDataRows(System.Predicate<DTMySQL{{file.ClassName}}> condition, System.Comparison<DTMySQL{{file.ClassName}}> comparison)
        {
            if (condition == null)
            {
                throw new System.Exception(""Condition is invalid."");
            }

            if (comparison == null)
            {
                throw new System.Exception(""Comparison is invalid."");
            }

            List<DTMySQL{{file.ClassName}}> results = new List<DTMySQL{{file.ClassName}}>();
            foreach (var dataRow in _dict)
            {
                DTMySQL{{file.ClassName}} dr = dataRow.Value;
                if (condition(dr))
                {
                    results.Add(dr);
                }
            }

            results.Sort(comparison);
            return results.ToArray();
        }

        // ========= CustomExtraString begin ===========

        // ========= CustomExtraString end ===========
    }

    /// <summary>
    /// Auto Generate for Tab File: ""{{file.ClassName}}.bytes""
    /// Singleton class for less memory use
    /// </summary>
    public partial class DTMySQL{{file.ClassName}} : TableRowFieldParser
    {
        /// <summary>
        /// ID Column/编号/主键
        /// </summary>
        public string Id { get; private set; }

        /// <summary>
        /// Name/名字
        /// </summary>
        public string Value { get; set; }

        internal DTMySQL{{file.ClassName}}()
        {
            Reset();
        }

        internal DTMySQL{{file.ClassName}}(System.Data.DataRow row)
        {
            Reload(row);
        }

        internal void Reload(System.Data.DataRow row)
        {
            Id = Get_string(row[""USERID""].ToString(), """");
            Value = Get_string(row[""USERID""].ToString(), """");
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name=""row""></param>
        /// <returns></returns>
        public string ParsePrimaryKey(System.Data.DataRow row)
        {
            var primaryKey = Get_string(row[""USERID""].ToString(), """");
            return primaryKey;
        }

        public bool DeleteInMySQL()
        {
            return false;
        }

        public bool UpdateToMySQL()
        {
            return false;
        }

        public void Clone(DTMySQL{{file.ClassName}} c)
        {
        }

        public void Reset()
        {
        }
    }
}
";
	}
}
