// This file is auto generated by DataTableModuleEditor.cs!
// Don't manipulate me!
// Default Template for KEngine!

using System.Collections;
using System.Collections.Generic;
using TableML;

namespace Ash
{
    /// <summary>
    /// All dataTables list here, so you can reload all dataTables manully from the list.
    /// </summary>
    public partial class MySQLManager
    {
#if UNITY_EDITOR

        [UnityEditor.MenuItem("Window/Ash/DT/MySQL/Update All DataTables To MySQL")]
#endif
        public static void UpdateAllDataTablesToMySQL()
        {
        }

        //每个文件都要更新
#if UNITY_EDITOR

        [UnityEditor.MenuItem("Window/Ash/DT/MySQL/Class/Update Test DataTable To MySQL")]
#endif
        public static void UpdateTestToMySQL()
        {
            string commandText = "DROP TABLE " + "`TestTest`";
            DatabaseManager.GetInstance().DoSQLUpdateDelete(commandText);
            commandText = "CREATE TABLE `TestTest` (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, Value VARCHAR(20));";
            DatabaseManager.GetInstance().DoSQLUpdateDelete(commandText);

            //string commandText = string.Format("select max(id) from {0}", "TestTest");
            //UnityEngine.Debug.Log(DatabaseManager.GetInstance().GetSQLSelectInt(commandText));
        }
    }

    /// <summary>
    /// Auto Generate for Tab File: "Test.bytes"
    /// No use of generic and reflection, for better performance,  less IL code generating
    /// </summary>>
    public partial class DTMySQL_Test_Manager
    {
        private Dictionary<string, DTMySQL_Test> _dict = new Dictionary<string, DTMySQL_Test>();

        public DTMySQL_Test_Manager()
        {
            _dict = new Dictionary<string, DTMySQL_Test>();
        }

        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        public static List<DTMySQL_Test> LoadAll()
        {
            string commandText = string.Format("select * from {0};", "TestTest");
            return LoadBy_MySQLComText(commandText);
        }

        public static List<DTMySQL_Test> LoadById()
        {
            string commandText = string.Format("select * from {0} where {1}={2};" , "TestTest", "id", "1");
            return LoadBy_MySQLComText(commandText);
        }

        /// <summary>
        /// 从指定第几行开始，获得指定长度的数据行
        /// 如 GetMySqlSelect_Limit（5，10） 获得6-15行
        /// </summary>
        /// <param name="fromRow">开始行，第一行为0</param>
        /// <param name="offsetLenght">长度,如果是-1，则获得开始行到最后一行</param>
        /// <returns></returns>
        public static List<DTMySQL_Test> LoadAllByLimit(int from, int offsetLenght = -2) //SELECT*FROMtable LIMIT 5,10;
        {
            string commandText = "";
            if (offsetLenght < -1)
            {
                commandText = string.Format("select * from {0} limit {1};", "TestTest", from);
            }
            else
            {
                commandText = string.Format("select * from {0} limit {1},{2};", "TestTest", from, offsetLenght);
            }
            return LoadBy_MySQLComText(commandText);
        }

        public static List<DTMySQL_Test> LoadBy_MySQLComText(string commandText)
        {
            List<DTMySQL_Test> testTempList = new List<DTMySQL_Test>();

            System.Data.DataTable dt = DatabaseManager.GetInstance().GetSQLSelectDataTable(commandText);
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (System.Data.DataRow dr in dt.Rows)
                {
                    DTMySQL_Test temp = new DTMySQL_Test(dr);
                    testTempList.Add(temp);
                }
            }

            return testTempList;
        }

        /// <summary>
        /// 获得MySQL数据表里面的Row总数量
        /// </summary>
        public static int MySQL_GetRowsCount()
        {
            string commandText = string.Format("select count(*) from {0}", "TestTest");
            return DatabaseManager.GetInstance().GetSQLSelectInt(commandText);
        }

        public static int MySQL_GetMaxID() 
        {
            string commandText = string.Format("select max(id) from {0}", "TestTest");
            return DatabaseManager.GetInstance().GetSQLSelectInt(commandText);
        }

        /// <summary>
        /// foreachable enumerable: Test
        /// </summary>
        public IEnumerable GetAll()
        {
            foreach (var row in _dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: Test
        /// </summary>
	    public IEnumerator GetEnumerator()
        {
            return _dict.Values.GetEnumerator();
        }

        /// <summary>
        /// 获取数据表行。
        /// </summary>
        /// <param name="id">数据表行的PrimaryKey。</param>
        /// <returns>数据表行。</returns>
        public DTMySQL_Test Get(string primaryKey)
        {
            DTMySQL_Test dataTable;
            if (_dict.TryGetValue(primaryKey, out dataTable)) return dataTable;
            return null;
        }

        /// <summary>
        /// 检查是否存在数据表行。
        /// </summary>
        /// <param name="primaryKey" > 数据表行的主Key。</param>
        /// <returns>是否存在数据表行。</returns>
        public bool HasDataRow(string primaryKey)
        {
            return _dict.ContainsKey(primaryKey);
        }

        /// <summary>
        /// 检查是否存在数据表行。
        /// </summary>
        /// <param name="condition" > 要检查的条件。</param>
        /// <returns>是否存在数据表行。</returns>
        public bool HasDataRow(System.Predicate<DTMySQL_Test> condition)
        {
            if (condition == null)
            {
                throw new System.Exception("Condition is invalid.");
            }

            foreach (var dataRow in _dict)
            {
                if (condition(dataRow.Value))
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// 获取符合条件的数据表行。
        /// </summary>
        /// <param name="condition" > 要检查的条件。</param>
        /// <returns>符合条件的数据表行。</returns>
        /// <remarks>当存在多个符合条件的数据表行时，仅返回第一个符合条件的数据表行。</remarks>
        public DTMySQL_Test GetDataRow(System.Predicate<DTMySQL_Test> condition)
        {
            if (condition == null)
            {
                throw new System.Exception("Condition is invalid.");
            }

            foreach (var dataRow in _dict)
            {
                DTMySQL_Test dr = dataRow.Value;
                if (condition(dr))
                {
                    return dr;
                }
            }

            return null;
        }

        /// <summary>
        /// 获取所有数据表行。
        /// </summary>
        /// <returns>所有数据表行。</returns>
        public DTMySQL_Test[] GetAllDataRows()
        {
            int index = 0;
            DTMySQL_Test[] allDataRows = new DTMySQL_Test[Count];
            foreach (var dataRow in _dict)
            {
                allDataRows[index++] = dataRow.Value;
            }

            return allDataRows;
        }

        /// <summary>
        /// 获取所有符合条件的数据表行。
        /// </summary>
        /// <param name="condition" > 要检查的条件。</param>
        /// <returns>所有符合条件的数据表行。</returns>
        public DTMySQL_Test[] GetAllDataRows(System.Predicate<DTMySQL_Test> condition)
        {
            if (condition == null)
            {
                throw new System.Exception("Condition is invalid.");
            }

            List<DTMySQL_Test> results = new List<DTMySQL_Test>();
            foreach (var dataRow in _dict)
            {
                DTMySQL_Test dr = dataRow.Value;
                if (condition(dr))
                {
                    results.Add(dr);
                }
            }

            return results.ToArray();
        }

        /// <summary>
        /// 获取所有排序后的数据表行。
        /// </summary>
        /// <param name="comparison" > 要排序的条件。</param>
        /// <returns>所有排序后的数据表行。</returns>
        public DTMySQL_Test[] GetAllDataRows(System.Comparison<DTMySQL_Test> comparison)
        {
            if (comparison == null)
            {
                throw new System.Exception("Comparison is invalid.");
            }

            List<DTMySQL_Test> allDataRows = new List<DTMySQL_Test>();
            foreach (var dataRow in _dict)
            {
                allDataRows.Add(dataRow.Value);
            }

            allDataRows.Sort(comparison);
            return allDataRows.ToArray();
        }

        /// <summary>
        /// 获取所有排序后的符合条件的数据表行。
        /// </summary>
        /// <param name="condition" > 要检查的条件。</param>
        /// <param name="comparison" > 要排序的条件。</param>
        /// <returns>所有排序后的符合条件的数据表行。</returns>
        public DTMySQL_Test[] GetAllDataRows(System.Predicate<DTMySQL_Test> condition, System.Comparison<DTMySQL_Test> comparison)
        {
            if (condition == null)
            {
                throw new System.Exception("Condition is invalid.");
            }

            if (comparison == null)
            {
                throw new System.Exception("Comparison is invalid.");
            }

            List<DTMySQL_Test> results = new List<DTMySQL_Test>();
            foreach (var dataRow in _dict)
            {
                DTMySQL_Test dr = dataRow.Value;
                if (condition(dr))
                {
                    results.Add(dr);
                }
            }

            results.Sort(comparison);
            return results.ToArray();
        }

        // ========= CustomExtraString begin ===========

        // ========= CustomExtraString end ===========
    }

    /// <summary>
    /// Auto Generate for Tab File: "Test.bytes"
    /// Singleton class for less memory use
    /// </summary>
    public partial class DTMySQL_Test : TableRowFieldParser
    {
        /// <summary>
        /// ID Column/编号/主键
        /// </summary>
        public string Id { get; private set; }

        /// <summary>
        /// Name/名字
        /// </summary>
        public string Value { get; set; }

        internal DTMySQL_Test()
        {
            Reset();
        }

        internal DTMySQL_Test(System.Data.DataRow row)
        {
            Reload(row);
        }

        internal DTMySQL_Test(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(System.Data.DataRow row)
        {
            Id = Get_string(row["USERID"].ToString(), "");
            Value = Get_string(row["USERID"].ToString(), "");
        }

        internal void Reload(TableFileRow row)
        {
            Id = row.Get_string(row.Values[0], "");
            Value = row.Get_string(row.Values[1], "");
        }

        public bool UpdateToMySQL()
        {
            string commandText = string.Format("select * from {0} where {1}='{2}';", "TestTest", "id", 10);
            if (string.IsNullOrEmpty(DatabaseManager.GetInstance().GetSQLSelectString(commandText)))
            {
                UnityEngine.Debug.Log("插入");
                //插入
                commandText = "insert into TestTest (";
                commandText += string.Format("{0},", "id");
                commandText += string.Format("{0},", "Value");
                commandText = commandText.Substring(0, commandText.Length - 1);
                commandText += ") values(";
                commandText += string.Format("'{0}',", 10);
                commandText += string.Format("'{0}',", 2);
                commandText = commandText.Substring(0, commandText.Length - 1);
                commandText += ");";
            }
            else
            {
                UnityEngine.Debug.Log("更新");
                //更新
                commandText = "update TestTest set ";

                commandText += string.Format("{0}='{1}',", "id", "11");
                commandText += string.Format("{0}='{1}',", "Value", "33");
                commandText = commandText.Substring(0, commandText.Length - 1);
                commandText += string.Format(" where id={0};", 10);
            }
            return DatabaseManager.GetInstance().DoSQLUpdateDelete(commandText);
        }

        public bool DeleteInMySQL()
        {
            string commandText = string.Format("delete from {0} where id={1};", "TestTest", Id);
            return DatabaseManager.GetInstance().DoSQLUpdateDelete(commandText);
        }


        public void Clone(DTMySQL_Test c)
        {
            Id = c.Id;
        }

        public void Reset()
        {
            Id = "";
        }
    }
}